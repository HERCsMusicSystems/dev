
[import "test"]
[import "capitol"]

[TestEq "list *" "user! capitol test studio" *x [list *x]]
[TestEq "list : *" ["user!" "capitol" "test" "studio"] *x [list : *x]]
[TestEq "list \"sonda\" *" "" *x [list "sonda" *x]]
[TestFails "list \"sonda\" : *" [list "sonda" : *x]]
[TestEq "list \"capitol\" *" "capitol" *x [list "capitol" *x]]
[TestEq "list \"capitol\" : *" [capitol] *x [list "capitol" : *x]]
[TestEq "list not *" "[[not : *0] *0 / fail]\n[[not : *0]]\n" *x [list not *x]]
[TestEq "list not : *" [[[not : *i] *i / fail] [[not : *i]]] *x [list not : *x]]

[scripted_atoms]
[TestFails "scripted_atoms" [text_term "sonda" *x]]
[auto_atoms]
[TestWorks "auto_atoms" [text_term "sonda" *x]]
[scripted_atoms]

[TestEq "CL atom index *clause" [[capitol "Australia" "Canberra"]] *x [CL capitol 0 *x]]
[TestEq "CL atom index:*clause" [[capitol "New Zealand" "Wellington"]] *x [CL capitol 1 : *x]]
[TestEq "CL index atom *clause" [[capitol "France" "Paris"]] *x [CL 2 capitol *x]]
[TestEq "CL index atom:*clause" [[capitol "Poland" "Warsaw"]] *x [CL 3 capitol : *x]]
[TestEq "CL atom *index" 5 *x [CL capitol *x]]
[TestEq "CL atom:*index" 5 *x [CL capitol *x]]
[TestWorks "CL atom index" [CL capitol 5]]
[TestFails "CL atom index" [CL capitol 4]]
[TestWorks "CL atom:index" [CL capitol : 5]]
[TestFails "CL atom:index" [CL capitol : 4]]

[TestEq "DELCL" [[[capitol "Australia" "Canberra"]] [[capitol "Poland" "Warsaw"]] [[capitol "USA" "Cupertino"]]] *x [DELCL capitol 2] [DELCL 1 capitol] [list capitol : *x]]

[TestFails "DELCL Fails 1" [DELCL capitol 3]]
[TestFails "DELCL Fails 2" [DELCL 3 capitol]]
[TestFails "DELCL Fails 3" [DELCL capitol -1]]
[TestFails "DELCL Fails 4" [DELCL -1 capitol]]

[TestFails "DELCL Protected" [DELCL 0 not]]

[TestEq "OVERWRITE" [[[capitol "Australia" "Canberra"]] [[capitol "Poland" "Warsaw"]] [[capitol] [show capitol]]] *x [OVERWRITE 2 [[capitol] [show capitol]]]]
[TestFails "OVERWRITE Fails 1" [OVERWRITE 3 [[capitol] [show capitol]]]]
[TestFails "OVERWRITE Fails 2" [OVERWRITE 0 [[enter]]]]

[TestFails "OVERWRITE Protected" [OVERWRITE 0 [[not]]]]

[TestFails "addcl0 protected" [addcl0 [[not]]]]
[TestEq "addcl0" [[capitol 1] 2 3 fail] *x [addcl0 [[capitol 1] 2 3 fail]] [CL 0 capitol *x]]
[TestFails "addcl protected" [addcl [[not]]]]
[TestEq "addcl" [[capitol 2] 33 4 fail] *x [addcl [[capitol 2] 33 4 fail] 4] [CL capitol 4 *x]]
[TestEq "addcl -1" [[capitol 123]] *x [addcl [[capitol 123]] -1] [CL 0 capitol *x]]
[TestEq "addcl 3" [[capitol fail]] *x [addcl [[capitol fail]] 3] [CL 3 capitol *x]]

[TestFails "create_atom 127 (confirms not atom)" [create_atom 127]]
[TestWorks "create_atom atom (confirms atom)" [create_atom sonda]]
[TestEq "create_atom *var (anonymous)" [sonda] *x [create_atom *atom] [list "user!" : *x] [is_atom *atom]]
[TestEq "create_atom name" "mariner sonda" *x [create_atom "mariner"] [list "user!" *x]]
[TestEq "create_atom name *var" ["mariner sonda" "voyager"] [*x *y] [create_atom "voyager" *atom] [add "" *atom *y] [list "user!" *x]]
[TestEq "create_atom name:*var" ["mariner sonda" "voyager"] [*x *y] [create_atom "voyager" : *atom] [add "" *atom *y] [list "user!" *x]]

[TestWorks "create_atoms []" [create_atoms]]
[TestWorks "create_atoms 1 2 command 3" [create_atoms *1 *2 command *3] [is_atom *1] [is_atom *2] [is_atom *3]]
[TestFails "create_atoms \"sonda\"" [create_atoms "sonda"]]
[TestFails "create_atoms 127" [create_atoms 127]]

[TestFails "search_atom directory/atom 1" [search_atom "stdio" "command" *x]]
[TestFails "search_atom directory/atom 2" [search_atom "studio" "cmmnd" *x]]
[TestFails "search_atom atom" [search_atom "cmmnd" *x]]
[TestEq "search_atom 1" command *x [search_atom "studio" "command" *x]]
[TestEq "search_atom 2" command *x [search_atom "studio" "command" : *x]]
[TestEq "search_atom 3" command *x [search_atom "command" *x]]
[TestEq "search_atom 4" command *x [search_atom "command" : *x]]

[TestFails "search_atom_c directory/atom 1" [search_atom_c "stdio" "command" *x]]
[TestEq "search_atom_c directory/atom 2" *CMMND *cmmnd [search_atom_c "studio" "cmmnd" *cmmnd] [list "studio" : *list] [eq *list [*CMMND : *]]]
[TestEq "search_atom_c atom" *CMMNDER *x [search_atom_c "cmmnder" *x] [list "user!" : *list] [eq [*CMMNDER : *] *list]]
[TestEq "search_atom_c 1" command *x [search_atom_c "studio" "command" *x]]
[TestEq "search_atom_c 2" command *x [search_atom_c "studio" "command" : *x]]
[TestEq "search_atom_c 3" command *x [search_atom_c "command" *x]]
[TestEq "search_atom_c 4" command *x [search_atom_c "command" : *x]]

[TestWorks "unique_atoms" [unique_atoms]]
[TestWorks "unique_atoms command" [unique_atoms command]]
[TestEq "unique_atoms *x" [] *x [unique_atoms *x]]
[create_atom "command"] [create_atom "inner"]
[TestFails "unique_atoms" [unique_atoms]]
[TestFails "unique_atoms \"studio\"" [unique_atoms "studio"]]
[TestEq "unique_atoms *x" [[@ studio . command "studio"] [@ user! . command "user!"]] *x [unique_atoms *x]]
[TestEq "unique_atoms *x command *y \"studio\" *z"
	[[[@ studio . command "studio"]] [[@ user! . command "user!"]] []] [*x *y *z]
	[unique_atoms *x command *y "studio" *z]
]
[TestEq "unique_atoms *x command @ studio . command \"studio\" \"user!\""
	[[@ studio . command "studio"] [@ user! . command "user!"] [@ user! . command "user!"] [@ studio . command "studio"]] *x
	[unique_atoms *x command @ studio . command "studio" "user!"]
]

[TestEq "preprocessor *x" [] *x [preprocessor *x]]
[TestEq "preprocessor:*x" [] *x [preprocessor : *x]]
[TestEq "preprocessor eq" eq *x [preprocessor eq] [preprocessor : *x]]
[TestEq "preprocessor []" [] *x [preprocessor []] [preprocessor *x]]
[TestEq "preprocessor:eq" eq *x [preprocessor eq] [preprocessor : *x]]
[TestEq "[preprpocessor]" [] *x [preprocessor] [preprocessor : *x]]

[TestWorks "prompt set" [prompt "=> "]]
[TestEq "prompt *x" "=> " *x [prompt *x]]
[TestEq "prompt:*x" "=> " *x [prompt : *x]]

[TestWorks "is_atom atom" [is_atom command]]
[TestFails "is_atom 127" [is_atom 127]]

[TestWorks "is_integer 127" [is_integer 127]]
[TestFails "is_integer 127.0" [is_integer command]]

[TestWorks "is_double 127.0" [is_double 127.0]]
[TestFails "is_double 127" [is_double 127]]

[TestWorks "is_number 127.0" [is_number 127.0]]
[TestWorks "is_number 127" [is_number 127]]
[TestFails "is_number atom" [is_number command]]

[TestWorks "is_var *" [is_var *]]
[TestFails "is_var atom" [is_var command]]

[TestFails "is_head atom" [is_head command]]

[TestWorks "is_text text" [is_text "sonda"]]
[TestFails "is_text atom" [is_text command]]

[TestWorks "has_machine sum" [has_machine sum]]
[TestFails "has_machine command" [has_machine command]]
[TestWorks "has_machine studio" [has_machine "studio"]]
[TestFails "has_machine capitol" [has_machine "capitol"]]

[TestEq "text_list sonda" [115 111 110 100 97] *x [text_list "sonda" *x]]
[TestEq "text_list 115 111 110 100 97" "sonda" *x [text_list *x [115 111 110 100 97]]]
[TestWorks "text_list 115 111 110 100 97 \"sonda\"" [text_list "sonda" [115 111 110 100 97]]]
[TestFails "text_list 115 111 110 100 97 \"sonda\"" [text_list "sonda" [115 111 110 100 98]]]

[TestEq "e32 *" 0 *x [e32 *x]]
[TestEq "e32 * be" 190 *x [e32 *x 0xbe]]
[TestEq "e32 * babe" 47806 *x [e32 *x 0xbe 0xba]]
[TestEq "e32 * febabe" 16693950 *x [e32 *x 0xbe 0xba 0xfe]]
[TestEq "e32 * cafebabe" -889275714 *x [e32 *x 0xbe 0xba 0xfe 0xca]]
[TestEq "e32 -889275714 : *" [0xbe 0xba 0xfe 0xca] *x [e32 -889275714 : *x]]
[TestEq "e32 cafebabe" [0xbe 0xba 0xfe 0xca] [*a *b *c *d] [e32 -889275714 *a *b *c *d]]
[TestWorks "e32 cafebabe 0xbe 0xba 0xfe 0xca" [e32 -889275714 0xbe 0xba 0xfe 0xca]]
[TestFails "e32 cafebabe 0xbe 0xba 0xfe 0xce" [e32 -889275714 0xbe 0xba 0xfe 0xce]]

[TestEq "add1 127 *" 128 *x [add1 127 *x]]
[TestEq "add1 127 : *" 128 *x [add1 127 : *x]]
[TestEq "add1 127.5 *" 128.5 *x [add1 127.5 *x]]
[TestEq "add1 127.5 : *" 128.5 *x [add1 127.5 : *x]]
[TestWorks "add1 127.0 128.0" [add1 127.0 128.0]]
[TestFails "add1 127 : 127" [add1 127 : 127]]

[TestEq "sub1 127 *" 126 *x [sub1 127 *x]]
[TestEq "sub1 127 : *" 126 *x [sub1 127 : *x]]
[TestEq "sub1 127.5 *" 126.5 *x [sub1 127.5 *x]]
[TestEq "sub1 127.5 : *" 126.5 *x [sub1 127.5 : *x]]
[TestWorks "sub1 127.5 : 126.5" [sub1 127.5 : 126.5]]
[TestFails "sub1 127 127" [sub1 127 127]]

[TestEq "sum [1 2 *]" 3 *x [sum 1 2 *x]]
[TestEq "sum [1 2.0 : *]" 3.0 *x [sum 1 2.0 : *x]]
[TestEq "sum [1 * 3]" 2 *x [sum 1 *x 3]]
[TestEq "sum [1 * : 3.0]" 2.0 *x [sum 1 *x : 3.0]]
[TestEq "sum [1.0 2 : *]" 3.0 *x [sum 1.0 2 : *x]]
[TestEq "sum [1.0 2.0 *]" 3.0 *x [sum 1.0 2.0 *x]]
[TestEq "sum [1.0 * : 3]" 2.0 *x [sum 1.0 *x : 3]]
[TestEq "sum [1.0 * 3.0]" 2.0 *x [sum 1.0 *x 3.0]]
[TestEq "sum [* 2 : 3]" 1 *x [sum *x 2 : 3]]
[TestEq "sum [* 2 3.0]" 1.0 *x [sum *x 2 3.0]]
[TestEq "sum [* 2.0 : 3]" 1.0 *x [sum *x 2.0 : 3]]
[TestEq "sum [* 2.0 3.0]" 1.0 *x [sum *x 2.0 3.0]]
[TestWorks "sum [1 2 3]" [sum 1 2 3]]
[TestFails "sum [1 2 4]" [sum 1 2 4]]
[TestEq "sum [command pp \"commandpp\"]" "commandpp" *x [sum command pp *x]]
[TestEq "sum [\"command\" \"pp\" \"commandpp\"]" "commandpp" *x [sum "command" "pp" *x]]
[TestEq "sum [command pp \"commandpp\"]" "pp" *x [sum command *x "commandpp"]]
[TestEq "sum [\"command\" \"pp\" \"commandpp\"]" "pp" *x [sum "command" *x "commandpp"]]
[TestEq "sum [command pp \"commandpp\"]" "command" *x [sum *x pp "commandpp"]]
[TestEq "sum [\"command\" \"pp\" \"commandpp\"]" "command" *x [sum *x "pp" "commandpp"]]
[TestWorks "sum [command pp \"commandpp\"]" [sum command pp "commandpp"]]
[TestFails "sum [command pp sum]" [sum command pp sum]]

[TestEq "times [2 8 : *]" 16 *x [times 2 8 : *x]]
[TestEq "times [2 8.5 *]" 17.0 *x [times 2 8.5 *x]]
[TestFails "times [0 * 16]" [times 0 * 16]]
[TestEq "times [2 * 17]" 8 *x [times 2 *x 17]]
[TestEq "times [2 * : 17.0]" 8.5 *x [times 2 *x : 17.0]]
[TestEq "times [2.0 8  *]" 16.0 *x [times 2.0 8 *x]]
[TestEq "times [2.0 8.5 : *]" 17.0 *x [times 2.0 8.5 : *x]]
[TestFails "times [0.0 * : 16]" [times 0.0 * : 16]]
[TestEq "times [2.0 * : 17]" 8.5 *x [times 2.0 *x : 17]]
[TestEq "times [2.0 * 17.0]" 8.5 *x [times 2.0 *x 17.0]]
[TestFails "times [* 0 : 17]" [times * 0 : 17]]
[TestEq "times [* 8 17]" 2 *x [times *x 8 17]]
[TestEq "times [* 8 : 17.0]" 2.125 *x [times *x 8 : 17.0]]
[TestFails "times [* 0.0 17]" [times * 0.0 17]]
[TestEq "times [* 8.5 17]" 2.0 *x [times *x 8.5 17]]
[TestEq "times [* 8.5 : 17.0]" 2.0 *x [times *x 8.5 : 17.0]]
[TestWorks "times [2 3 6]" [times 2 3 6]]
[TestFails "times [2 3 4]" [times 2 3 4]]

[TestEq "mac [2 4 3 : *]" 11 *x [mac 2 4 3 : *x]]
[TestEq "mac [2.0 4 3 *]" 11.0 *x [mac 2.0 4 3 *x]]
[TestEq "mac [2 4 * 11]" 3 *x [mac 2 4 *x 11]]
[TestEq "mac [2 4.0 * : 11]" 3.0 *x [mac 2 4.0 *x : 11]]
[TestEq "mac [2 * 3 11]" 4 *x [mac 2 *x 3 11]]
[TestEq "mac [2 * 3 : 11.0]" 4.0 *x [mac 2 *x 3 : 11.0]]
[TestEq "mac [* 4 3 11]" 2 *x [mac *x 4 3 11]]
[TestEq "mac [* 4 3.0 : 11]" 2.0 *x [mac *x 4 3.0 : 11]]
[TestFails "mac [* 0 1 2]" [mac * 0 1 2]]
[TestFails "mac [0 * 1 2.0]" [mac 0 * 1 2.0]]
[TestWorks "mac [2 4 3 11.0]" [mac 2 4 3 11.0]]
[TestWorks "mac [2 4.0 3 11]" [mac 2 4.0 3 11]]
[TestWorks "mac [2 4 3.0 11.0]" [mac 2 4 3.0 11.0]]
[TestFails "mac [2 4 3 12]" [mac 2 4 3 12]]
[TestFails "mac [2 4.0 3 12]" [mac 2 4.0 3 12]]
[TestFails "mac [2 4.0 3 12.0]" [mac 2 4.0 3 12.0]]
[TestFails "mac [2 4 3 12.0]" [mac 2 4 3 12.0]]

[TestEq "add * 1 2" 3 *x [add *x 1 2]]
[TestEq "add * 1 2 3.0" 6.0 *x [add *x 1 2 3.0]]
[TestEq "add * 1 2 \"0\"" "30" *x [add *x 1 2 "0"]]
[TestEq "add * 1 2 3.0 command" "6.000000command" *x [add *x 1 2 3.0 command]]
[TestEq "add 1 2 *" 3 *x [add 1 2 *x]]
[TestEq "add 1 2 3.0 *" 6.0 *x [add 1 2 3.0 *x]]
[TestEq "add 1 2 \"0\" *" "30" *x [add 1 2 "0" *x]]
[TestEq "add 1 2 3.0 command *" "6.000000command" *x [add 1 2 3.0 command *x]]
[TestEq "add 1 2:*" 3 *x [add 1 2 : *x]]
[TestEq "add 1 2 3.0:*" 6.0 *x [add 1 2 3.0 : *x]]
[TestEq "add 1 2 \"0\":*" "30" *x [add 1 2 "0" : *x]]
[TestEq "add 1 2 3.0 command:*" "6.000000command" *x [add 1 2 3.0 command : *x]]
[TestEq "add *" 0 *x [add *x]]
[TestEq "add [2 3] [4 5] *x" 26 *x [add [2 3] [4 5] *x]]
[TestEq "add [2 3.0] [4 5] *x" 26.0 *x [add [2 3.0] [4 5] *x]]

[TestEq "div 7 2 *" 3 *x [div 7 2 *x]]
[TestEq "div 7 2.0 : *" 3.5 *x [div 7 2.0 : *x]]
[TestEq "div 7.0 2 : *" 3.5 *x [div 7.0 2 : *x]]
[TestEq "div 7.0 2.0 *" 3.5 *x [div 7.0 2.0 *x]]
[TestFails "div 7 0" [div 7 0 *x]]
[TestFails "div 7 0.0" [div 7 0.0 *x]]
[TestWorks "div 8 2 4" [div 8 2 4]]
[TestFails "div 8 2 3" [div 8 2 3]]

[TestEq "mod 14 5 : *" 4 *x [mod 14 5 : *x]]
[TestEq "mod 14 5 * : *" [4 2] [*x *y] [mod 14 5 *x : *y]]
[TestEq "mod 14 5.0 *" 4.0 *x [mod 14 5.0 *x]]
[TestEq "mod 14 5.0 * *" [4.0 2.0] [*x *y] [mod 14 5.0 *x *y]]
[TestEq "mod 14.0 5 : *" 4.0 *x [mod 14.0 5 : *x]]
[TestEq "mod 14.0 5 * : *" [4.0 2.0] [*x *y] [mod 14.0 5.0 *x : *y]]
[TestEq "mod 14.0 5.0 *" 4.0 *x [mod 14.0 5 *x]]
[TestEq "mod 14.0 5.0 * *" [4.0 2.0] [*x *y] [mod 14.0 5.0 *x *y]]
[TestWorks "mod 14 5 2 4" [mod 14 5 4 2]]
[TestFails "mod 14 5 2 2" [mod 14 5 2 2]]

[TestEq "sub 7 4 *" 3 *x [sub 7 4 *x]]
[TestEq "sub 7 8.25 : *x" -1.25 *x [sub 7 8.25 : *x]]
[TestEq "sub 7.0 4 : *" 3.0 *x [sub 7.0 4 : *x]]
[TestEq "sub 7.0 3.0 *" 4.0 *x [sub 7.0 3.0 *x]]
[TestWorks "sub 5 4 1" [sub 5 4 1]]
[TestFails "sub 5 4 3" [sub 5 4 3]]
[TestEq "sub 4 *" -4 *x [sub 4 *x]]
[TestEq "sub -6.25 : *" 6.25 *x [sub -6.25 : *x]]
[TestWorks "sub 5.25 -5.25" [sub 5.25 -5.25]]
[TestFails "sub 5.0 : -5" [sub 5.0 -5]]

[TestEq "mult * 4 2" 8 *x [mult *x 4 2]]
[TestEq "mult * 4 2 3.0" 24.0 *x [mult *x 4 2 3.0]]
[TestEq "mult 4 2 *" 8 *x [mult 4 2 *x]]
[TestEq "mult 4 2 3.0 *" 24.0 *x [mult 4 2 3.0 *x]]
[TestEq "mult 4 2:*" 8 *x [mult 4 2 : *x]]
[TestEq "mult 4 2 3.0:*" 24.0 *x [mult 4 2 3.0 : *x]]
[TestEq "mult *" 1 *x [mult *x]]

[TestEq "and 0x303003 0xf0d00e *" 0x301002 *x [and 0x303003 0xf0d00e *x]]
[TestEq "and 0xf0d00e 0x303003:*" 0x301002 *x [and 0xf0d00e 0x303003 : *x]]
[TestWorks "and 3 2 2" [and 3 2 2]]
[TestFails "and 3 2 1" [and 3 2 1]]

[TestEq "or 0x303003 0xf0d00e *" 0xf0f00f *x [or 0x303003 0xf0d00e *x]]
[TestEq "or 0xf0d00e 0x303003:*" 0xf0f00f *x [or 0xf0d00e 0x303003 : *x]]
[TestWorks "or 1 2 3" [or 1 2 3]]
[TestFails "or 1 2 4" [or 1 2 4]]

[TestEq "xor 0x303003 0xf0d00e *" 0xc0e00d *x [xor 0x303003 0xf0d00e *x]]
[TestEq "xor 0xf0d00e 0x303003:*" 0xc0e00d *x [xor 0xf0d00e 0x303003 : *x]]
[TestWorks "xor 3 2 1" [xor 3 2 1]]
[TestFails "xor 3 2 2" [xor 3 2 2]]

[TestEq "abs 127:*" 127 *x [abs 127 : *x]]
[TestEq "abs -127 *" 127 *x [abs -127 *x]]
[TestEq "abs 127.5 *" 127.5 *x [abs 127.5 *x]]
[TestEq "abs -127.5:*" 127.5 *x [abs 127.5 : *x]]
[TestWorks "abs -127 127" [abs -127.5 127.5]]
[TestFails "abs -4 5" [abs -4 5]]

[TestEq "cos 180 *" -1.0 *x [cos 180 *x]]
[TestEq "cos 180:*" -1.0 *x [cos 180 : *x]]
[TestEq "cos 3.1415926535897931 *" -1.0 *x [cos 3.1415926535897931 *x]]
[TestEq "cos 3.1415926535897931:*" -1.0 *x [cos 3.1415926535897931 : *x]]
[TestEq "cos * -1" 3.1415926535897931 *x [cos *x -1]]
[TestEq "cos * : -1.0" 3.1415926535897931 *x [cos *x : -1.0]]
[TestFails "cos * -2.0" [cos * -2.0]]
[TestFails "cos * : 2" [cos * : 2]]
[TestWorks "cos 3.1415926535897931 -1.0" [cos 3.1415926535897931 -1.0]]
[TestFails "cos 3.1415926535897931 0.0" [cos 3.1415926535897931 0.0]]

[TestEq "sin 90 *" 1.0 *x [sin 90 *x]]
[TestEq "sin 270:*" -1.0 *x [sin 270 : *x]]
[TestEq "sin -1.5707963267948966 *" -1.0 *x [sin -1.5707963267948966 *x]]
[TestEq "sin 1.5707963267948966:*" 1.0 *x [sin 1.5707963267948966 : *x]]
[TestEq "sin * 1" 1.5707963267948966 *x [sin *x 1]]
[TestEq "sin * : -1.0" -1.5707963267948966 *x [sin *x : -1.0]]
[TestFails "sin * -2.0" [sin * -2.0]]
[TestFails "sin * : 2" [sin * : 2]]
[TestWorks "sin 90 1.0" [sin 90 1.0]]
[TestFails "sin 91 1.0" [sin 91 1.0]]

[TestEq "tan 0 *" 0.0 *x [tan 0 *x]]
[TestEq "tan 0:*" 0.0 *x [tan 0 : *x]]
[TestEq "tan 0.0 *" 0.0 *x [tan 0.0 *x]]
[TestEq "tan 0.0:*" 0.0 *x [tan 0.0 : *x]]
[TestEq "tan * 1.0" 0.78539816339744826 *x [tan *x 1.0]]
[TestEq "tan * : 1.0" 0.78539816339744826 *x [tan *x : 1.0]]
[TestWorks "tan 0.0 0.0" [tan 0.0 0.0]]
[TestFails "tan 1.0 0.0" [tan 1.0 0.0]]

[TestEq "degrad 180 *" 3.1415926535897931 *x [degrad 180 *x]]
[TestEq "degrad 180:*" 3.1415926535897931 *x [degrad 180 : *x]]
[TestEq "degrad * 3.1415926535897931" 180.0 *x [degrad *x 3.1415926535897931]]
[TestEq "degrad *:3.1415926535897931" 180.0 *x [degrad *x : 3.1415926535897931]]
[TestWorks "degrad 180 3.1415926535897931" [degrad 180 3.1415926535897931]]
[TestFails "degrad 181 3.1415926535897931" [degrad 181 3.1415926535897931]]

[TestEq "e *" 2.7182818284590451 *x [e *x]]
[TestEq "e : *" 2.7182818284590451 *x [e : *x]]
[TestWorks "e 2.7182818284590451" [e 2.7182818284590451]]
[TestFails "e 2.7182818284590451" [e 2.718281828459]]
[TestEq "pi *" 3.1415926535897931 *x [pi *x]]
[TestEq "pi : *" 3.1415926535897931 *x [pi : *x]]
[TestWorks "pi 3.1415926535897931" [pi 3.1415926535897931]]
[TestFails "pi 3.1415926535897931" [pi 3.141592653589]]

[TestEq "exp 8.0 *" 2980.95798704172827 *x [exp 8.0 *x]]
[TestEq "exp 8 : *" 2980 *x [exp 8 : *x]]
[TestEq "exp * : 2980.95798704172827" 8.0 *x [exp *x : 2980.95798704172827]]
[TestEq "exp * 2980" 7 *x [exp *x 2980]]
[TestFails "exp * 0.0" [exp * 0.0]]
[TestFails "exp : -1" [exp * -1]]
[TestWorks "exp 8 2980" [exp 8 2980]]
[TestFails "exp 8 2981" [exp 8 2981]]

[TestEq "log2 8.0 *" 3.0 *x [log2 8.0 *x]]
[TestEq "log2 8 : *" 3 *x [log2 8 : *x]]
[TestEq "log2 *x 3.0" 8.0 *x [log2 *x 3.0]]
[TestEq "log2 *x : 3" 8 *x [log2 *x : 3]]
[TestFails "log2 0.0 : *" [log2 0.0 : *]]
[TestFails "log2 -1 *" [log2 -1 *]]
[TestWorks "log2 8 3" [log2 8 3]]
[TestFails "log2 8 4" [log2 8 4]]

[TestEq "log10 1000.0 *" 3.0 *x [log10 1000.0 *x]]
[TestEq "log10 1000 : *" 3 *x [log10 1000 : *x]]
[TestEq "log10 *x 3.0" 1000.0 *x [log10 *x 3.0]]
[TestEq "log10 *x : 3" 1000 *x [log10 *x : 3]]
[TestFails "log10 0.0 *" [log10 0.0 *]]
[TestFails "log10 -1 : *" [log10 -1 : *]]
[TestWorks "log10 1000 3" [log10 1000 3]]
[TestFails "log10 1000 4" [log10 1000 4]]

[TestEq "ln 20.085536923187669 *" 3.0 *x [ln 20.085536923187669 *x]]
[TestEq "ln 21 : *" 3 *x [ln 21 : *x]]
[TestEq "ln *x 3.0" 20.085536923187672 *x [ln *x 3.0]]
[TestEq "ln *x : 3" 20 *x [ln *x : 3]]
[TestFails "ln 0.0 *" [ln 0.0 *]]
[TestFails "ln -1 : *" [ln -1 : *]]
[TestWorks "ln 21 3" [ln 21 3]]
[TestFails "ln 20 3" [ln 20 3]]

[TestEq "log 5 125 *" 3 *x [log 5 125 *x]]
[TestEq "log 5 125 : *" 3 *x [log 5 125 : *x]]
[TestEq "log 5.0 25 *" 2.0 *x [log 5.0 25 *x]]
[TestEq "log 5 25.0 : *" 2.0 *x [log 5 25.0 : *x]]
[TestWorks "log 5 25 2" [log 5 25 2]]
[TestFails "log 5 25.0 2" [log 5 25.0 2]]
[TestFails "log 5 25 2.0" [log 5 25 2.0]]

[TestEq "pow 2.0 3.0 *" 8.0 *x [pow 2.0 3.0 *x]]
[TestEq "pow 2.0 3 *" 8.0 *x [pow 2.0 3 *x]]
[TestEq "pow 2 3.0 : *" 8.0 *x [pow 2 3.0 : *x]]
[TestEq "pow 2 3 : *" 8 *x [pow 2 3 : *x]]

[TestEq "pow 2.0 * 8.0" 3.0 *x [pow 2.0 *x 8.0]]
[TestEq "pow 2.0 * : 8" 3.0 *x [pow 2.0 *x : 8]]
[TestEq "pow 2 * : 8.0" 3.0 *x [pow 2 *x : 8.0]]
[TestEq "pow 2 * 8" 3 *x [pow 2 *x 8]]

[TestEq "pow * 3.0 : 8.0" 2.0 *x [pow *x 3.0 : 8.0]]
[TestEq "pow * 3.0 : 8" 2.0 *x [pow *x 3.0 : 8]]
[TestEq "pow * 3 8.0" 2.0 *x [pow *x 3 8.0]]
[TestEq "pow * 3 8" 2 *x [pow *x 3 8]]
[TestFails "pow 1 * 8" [pow 1 * 8]]
[TestFails "pow 2 * 0" [pow 2 * 0]]
[TestWorks "pow 2 3 8" [pow 2 3 8]]
[TestFails "pow 2 3 9" [pow 2 3 9]]

[TestEq "trunc 3.5 *" 3 *x [trunc 3.5 *x]]
[TestEq "trunc 3.5 : *" 3 *x [trunc 3.5 : *]]
[TestEq "trunc 3 *" 3.0 *x [trunc 3 *x]]
[TestEq "trunc 3 : *" 3.0 *x [trunc 3 : *x]]
[TestEq "trunc * 3" 3.0 *x [trunc *x 3]]
[TestEq "trunc * : 3" 3.0 *x [trunc *x : 3]]
[TestEq "trunc * 3.5" 3.0 *x [trunc *x 3.5]]
[TestEq "trunc * 3.5" 3.0 *x [trunc *x : 3.5]]
[TestWorks "trunc 3.5 3" [trunc 3.5 3]]
[TestWorks "trunc 3 3.0" [trunc 3 3.0]]
[TestFails "trunc 3.5 3.0" [trunc 3.5 3.0]]
[TestFails "trunc 3 3.5" [trunc 3 3.5]]
[TestFails "trunc 3 3" [trunc 3 3]]

[TestEq "StringToLower \"Sonda Academy\" *x" "sonda academy" *x [StringToLower "Sonda Academy" *x]]
[TestEq "StringToLower *x \"Sonda Academy\"" "SONDA ACADEMY" *x [StringToLower *x : "Sonda Academy"]]
[TestEq "StringToUpper \"Sonda Academy\" *x" "SONDA ACADEMY" *x [StringToUpper "Sonda Academy" *x]]
[TestEq "StringToUpper *x \"Sonda Academy\"" "sonda academy" *x [StringToUpper *x : "Sonda Academy"]]
[TestEq "StringReplaceOnce \"012340540\" \"0\" \"-\" *x" "-12340540" *x [StringReplaceOnce "012340540" "0" "-" *x]]
[TestEq "StringReplaceAll \"012340540\" \"0\" \"-=\" *x" "-=1234-=54-=" *x [StringReplaceAll "012340540" "0" "-=" *x]]

[TestWorks "less 1 2 3 4.5 4.7 5 6" [less 1 2 3 4.5 4.7 5.0 6]]
[TestFails "less 1 2 3 4.5 4.5 6" [less 1 2 3 4.5 4.5 6]]
[TestFails "less 1 2 2 3" [less 1 2 2 3]]
[TestFails "less 1 2 command" [less 1 2 command]]
[TestWorks "less abs e \"pi\" pow" [less abs e "pi" pow]]
[TestFails "less abs e \"pi\" pi pow" [less abs e "pi" pi pow]]
[TestWorks "less []" [less []]]

[TestWorks "less_eq 1 2 3 4.5 4.7 5 6" [less_eq 1 2 3 4.5 4.7 5.0 6]]
[TestWorks "less_eq 1 2 3 4.5 4.5 6" [less_eq 1 2 3 4.5 4.5 6]]
[TestWorks "less_eq 1 2 2 3" [less_eq 1 2 2 3]]
[TestFails "less_eq 1 2 1.9 3" [less_eq 1 2 1.9 3]]
[TestFails "less_eq 1 2 command" [less_eq 1 2 command]]
[TestWorks "less_eq abs e \"pi\" pow" [less_eq abs e "pi" pow]]
[TestWorks "less_eq abs e \"pi\" pi pow" [less_eq abs e "pi" pi pow]]
[TestFails "less ln log ln" [less_eq ln log ln]]
[TestWorks "less_eq []" [less_eq []]]

[TestWorks "greater 6 5 4.7 4.5 3 2 1" [greater 6 5 4.7 4.5 3 2 1]]
[TestFails "greater 6 4.5 4.5 3 2 1" [greater 6 4.5 4.5 3 2 1]]
[TestFails "greater 3 2 2 1" [greater 3 2 2 1]]
[TestFails "greater command 2 1" [greater command 2 1]]
[TestWorks "greater pow \"pi\" e abs" [greater pow "pi" e abs]]
[TestFails "greater pow \"pi\" pi e abs" [greater pow pi "pi" e abs]]
[TestWorks "greater []" [greater []]]

[TestWorks "greater_eq 6 5 4.7 4.5 3 2 1" [greater_eq 6 5 4.7 4.5 3 2 1]]
[TestWorks "greater_eq 6 4.5 4.5 3 2 1" [greater_eq 6 4.5 4.5 3 2 1]]
[TestWorks "greater_eq 3 2 2 1" [greater_eq 3 2 2 1]]
[TestFails "greater_eq 3 1.9 2 1" [greater_eq 3 1.9 2 1]]
[TestFails "greater_eq command 2 1" [greater_eq command 2 1]]
[TestWorks "greater_eq pow \"pi\" e abs" [greater_eq pow "pi" e abs]]
[TestWorks "greater_eq pow pi \"pi\" e abs" [greater_eq pow pi "pi" e abs]]
[TestFails "greater ln log ln" [greater_eq ln log ln]]
[TestWorks "greater_eq []" [greater_eq []]]

[TestEq "max * 1 2 7 3 4" 7 *x [max *x 1 2 7 3 4]]
[TestEq "max * 1 2 7.5 3 4" 7.5 * [max *x 1 2 7.5 3 4]]
[TestEq "max * 1.0 2.0 7.0 3.0 4.0" 7.0 *x [max *x 1.0 2.0 7.0 3.0 4.0]]
[TestEq "max * 1.0 2.0 7 3.0 4.0" 7 *x [max *x 1.0 2.0 7 3.0 4.0]]
[TestEq "max * \"sonda\" \"viking\" \"mariner\"" "viking" *x [max *x "sonda" "viking" "mariner"]]
[TestEq "max * \"sonda\" write \"mariner\"" write *x [max *x "sonda" write "mariner"]]
[TestEq "max * abs xor pow" xor *x [max *x abs xor pow]]
[TestEq "max * abs \"xor\" pow" "xor" *x [max *x abs "xor" pow]]
[TestWorks "max 4 1 2 4 3" [max 4 1 2 4 3]]
[TestFails "max 1 1 2 4 3" [max 7 1 2 4 3]]

[TestEq "min *x 7 6 2 4 3" 2 *x [min *x 7 6 2 4 3]]
[TestEq "min *x 7 6 2.25 4 3" 2.25 *x [min *x 7 6 2.25 4 3]]
[TestEq "min *x 7.0 6.0 2 4.0 3.0" 2 *x [min *x 7.0 6.0 2 4.0 3.0]]
[TestEq "min *x 7.0 6.0 2.25 4.0 3.0" 2.25 *x [min *x 7.0 6.0 2.25 4.0 3.0]]
[TestEq "min * \"sonda\" \"mariner\" \"viking\"" "mariner" *x [min *x "sonda" "mariner" "viking"]]
[TestEq "min * \"sonda\" min \"viking\"" min *x [min *x "sonda" min "viking"]]
[TestEq "min *x xor abs pow" abs *x [min *x xor abs pow]]
[TestEq "min *x xor \"abs\" pow" "abs" *x [min *x xor "abs" pow]]
[TestWorks "min 2 4 2 3 5" [min 2 4 2 3 5]]
[TestFails "min 5 4 2 3 5" [min 5 4 2 3 5]]

[TestEq "timestamp 889621262" [1998 3 11 69 3 23 31 2] *x [timestamp 889621262 : *x]]
[TestEq "timestamp [1998 3 11 * * 23 31 2]" [889621262 69 3] [*x *a *b] [timestamp *x 1998 3 11 *a *b 23 31 2]]

[TestFails "remove_module \"sonda\"" [remove_module "sonda"]]
[TestWorks "remove_module \"capitol\"" [remove_module "capitol"]]
[TestEq "list" ["user!" "test" "studio"] *x [list : *x]]
[TestEq "create_module \"sonda\"" "sonda user! test studio" *x [create_module "sonda"] [list *x]]
[TestFails "has_machine \"sonda\"" [has_machine "sonda"]]
[TestEq "create_module" "user! sonda test studio" *x [create_module] [list *x]]
[TestEq "remove_module \"sonda\"" "user! test studio" *x [remove_module "sonda"] [list *x]]

[TestEq "create_module \"sonda\" \"prolog.studio\"" "sonda user! test studio" *x [create_module "sonda" "prolog.studio"] [list *x]]
[TestWorks "has_machine \"sonda\"" [has_machine "sonda"]]
[TestEq "create_atom \"mariner\"" "mariner" *x [create_atom "mariner"] [list "sonda" *x]]
[TestEq "create_atom \"viking\"" "viking mariner" *x [create_atom "viking"] [list "sonda" *x]]
[TestFails "set_machine viking 127" [set_machine viking 127]]
[TestWorks "set_machine viking \"sum\"" [set_machine viking "sum"]]
[TestEq "create_module" "user! sonda test studio" *x [create_module] [list *x]]

[TestFails "has_machine mariner" [has_machine mariner]]
[TestEq "list mariner" "" *x [list mariner *x]]
[TestWorks "has_machine viking" [has_machine viking]]
[TestFails "set_machine mariner \"times\"" [set_machine mariner "times"]]
[TestWorks "set_machine mariner \"studio\" \"times\"" [set_machine mariner "studio" "times"]]
[TestFails "set_machine mariner \"studio\" \"times\"" [set_machine mariner "studio" "times"]]
[TestWorks "has_machine mariner" [has_machine mariner]]
[TestEq "list mariner *" "mariner := #machine\n" *x [list mariner *x]]
[TestEq "list mariner : *" ["mariner := #machine"] *x [list mariner : *x]]
[TestWorks "viking 4 8 12" [viking 4 8 12]]
[TestWorks "mariner 4 8 32" [mariner 4 8 32]]

[TestEq "load \"keyboard\"" "user! keyboard sonda test studio" *x [load "keyboard"] [list *x]]
[TestEq "import \"capitol\"" "user! capitol keyboard sonda test studio" *x [import "capitol"] [list *x]]
[TestEq "import \"keyboard\"" "user! capitol keyboard sonda test studio" *x [import "keyboard"] [list *x]]
[TestEq "load \"keyboard\"" "user! keyboard capitol sonda test studio" *x [load "keyboard"] [list *x]]
[TestEq "reload" "user! keyboard capitol sonda test studio" *x [reload] [list *x]]

[TestWorks "remove_module \"capitol\" \"keyboard\" \"sonda\"" [remove_module "capitol" "keyboard" "sonda"]]
[TestFails "remove_module \"sonda\"" [remove_module "sonda"]]
[TestWorks "remove_module []" [remove_module]]

[TestEq "search_directories []" [] *x [search_directories []] [search_directories *x]]
[TestEq "search_directories : *" [] *x [search_directories : *x]]
[TestEq "search_directories [\"mariner\" \"viking\"]" ["mariner" "viking"] *x [search_directories ["mariner" "viking"]] [search_directories *x]]
[TestEq "add_search_directory" ["mariner" "viking"] *x [add_search_directory] [search_directories *x]]
[TestEq "add_search_directory \"sonda\"" ["sonda" "mariner" "viking"] *x [add_search_directory "sonda"] [search_directories *x]]
[TestWorks "search_directories []" [search_directories []]]
[TestEq "add_search_directory [\"mariner\" \"viking\"]" ["viking" "mariner"] *x [add_search_directory "mariner" "viking"] [search_directories *x]]

[TestEq "ARGS" ["a" "b" "c"] *x [ARGS : *x]]

[TestWorks "operating_system *" [operating_system *name] [is_text *name]]
[TestWorks "operating_system : *" [operating_system : *name] [is_text *name]]

[TestWorks "VARIABLE sonda" [VARIABLE sonda] [has_machine sonda]]
[TestFails "VARIABLE sonda" [VARIABLE sonda]]
[TestEq "sonda = " [] *x [sonda : *x]]
[TestEq "sonda = *" 127 *x [sonda *] [sonda : *x]]
[TestEq "sonda = " [1 2 3] *x [sonda [1 2 3]] [sonda : *x]]
[TestWorks "[sonda]" [sonda]]
[TestFails "has_machine sonda" [has_machine sonda]]

[TestEq "VARIABLE sonda 127" 127 *x [VARIABLE sonda 127] [sonda : *x]]
[TestWorks "[sonda]" [sonda]]
[TestFails "has_machine sonda" [has_machine sonda]]

[TestWorks "[var]" [var]]
[TestWorks "create_atom viking voyager" [create_atom "viking"] [create_atom "voyager"]]
[TestEq "var voyager [viking 127] * [* viking]" [[] 127 [] viking] [*a *b *c *d]
	[var voyager [viking 127] *v1 [*v2 viking]]
	[voyager : *a] [viking : *b] [*v1 : *c] [*v2 : *d]
]
[TestWorks "[voyager] [viking]" [voyager] [viking]]

[TestEq "inc" 128 *x [var [*a 127]] [inc *a] [*a : *x]]
[TestEq "inc 1270" "1270" *x [var [*a 127]] [inc *a "0"] [*a : *x]]
[TestEq "dec" 126 *x [var [*a 127]] [dec *a] [*a : *x]]
[TestEq "dec 125.5" 125.5 *x [var [*a 127]] [dec *a 1.5] [*a : *x]]

[create_atom "ee"]
[TestWorks "CONSTANT ee 2.7182" [CONSTANT ee 2.7182]]
[TestFails "ee *" [ee *x]]
[TestEq "ee : *" 2.7182 *x [ee : *x]]
[TestFails "CONSTANT ee" [CONSTANT ee 123]]
[TestFails "[ee]" [ee]]

[TestWorks "ACCUMULATOR sonda" [ACCUMULATOR sonda]]
[TestFails "ACCUMULATOR sonda" [ACCUMULATOR sonda]]
[TestEq "sonda 1 2 3" [3 2 1] *x [sonda 1] [sonda 2] [sonda 3] [sonda : *x]]
[TestWorks "has_machine sonda" [has_machine sonda]]
[TestWorks "[sonda]" [sonda]]
[TestFails "has_machine sonda" [has_machine sonda]]

[TestWorks "STACK sonda" [STACK sonda]]
[TestFails "StACK sonda" [STACK sonda]]
[TestWorks "has_machine sonda" [has_machine sonda]]
[TestFails "sonda *x" [sonda *]]
[TestEq "sonda [1 2 3 4]" [4 3 2 1] *x [sonda 1 2 3 4] [sonda : *x]]
[TestEq "sonda [127 128]" [128 127 4 3 2 1] *x [sonda 127 128] [sonda : *x]]
[TestEq "sonda *x *y" [128 127] [*x *y] [sonda *x *y]]
[TestEq "sonda : *x" [4 3 2 1] *x [sonda : *x]]
[TestWorks "[sonda]" [sonda]]
[TestFails "has_machine sonda" [has_machine sonda]]

[TestWorks "QUEUE sonda" [QUEUE sonda]]
[TestFails "QUEUE sonda" [QUEUE sonda]]
[TestWorks "has_machine sonda" [has_machine sonda]]
[TestFails "sonda *x" [sonda *]]
[TestEq "sonda [1 2 3 4]" [1 2 3 4] *x [sonda 1 2 3 4] [sonda : *x]]
[TestEq "sonda [127 128]" [1 2 3 4 127 128] *x [sonda 127 128] [sonda : *x]]
[TestEq "sonda *x *y" [1 2] [*x *y] [sonda *x *y]]
[TestEq "sonda : *x" [3 4 127 128] *x [sonda : *x]]
[TestWorks "[sonda]" [sonda]]
[TestFails "has_machine sonda" [has_machine sonda]]

[TestEq "lambda" [[0 0] [1.5 -1.5] [3.0 -3.0]] [*a *b *c]
	[var [*i 0] [*d 0]]
	[lambda *u [[*x *y]] [*i : *x] [*d : *y] [inc *i] [inc *i 0.5] [dec *d] [dec *d 0.5]]
	[*u *a] [*u *b] [*u *c]
]

[TestEq "define-this" [[[*atom 1 2 3] 4 5 6 / fail]] *x [create_atom *atom] [define-this [*atom 1 2 3] 4 5 6 / fail] [list *atom : *x]]

[TestWorks "ARRAY sonda 2 3" [ARRAY sonda 2 3]]
[TestFails "ARRAY sonda 2 3" [ARRAY sonda 2 3]]
[TestWorks "setting values for array"
	[sonda 0 0 1] [sonda 0 1 2] [sonda 0 2 3]
	[sonda 1 0 4] [sonda 1 1 5] [sonda 1 2 6]
]
[TestEq "getting values from array" [1 2 3 4 5 6] [*a *b *c *d *e *f]
	[sonda 0 0 : *a] [sonda 0 1 : *b] [sonda 0 2 : *c]
	[sonda 1 0 : *d] [sonda 1 1 : *e] [sonda 1 2 : *f]
]
[TestWorks "[sonda]" [sonda]]

[TestEq "rnd *" 1 *x [rnd *x]]
[TestEq "rnd : *" 5609938 *x [rnd : *x]]
[TestEq "rnd * min max" 123 *x [rnd *x 120 127]]
[TestEq "rnd * min : max" 121 *x [rnd *x 120 : 127]]
[TestEq "rnd min * max" 123 *x [rnd 120 *x 127]]
[TestEq "rnd min * : max" 122 *x [rnd 120 *x : 127]]
[TestEq "rnd min max *" 121 *x [rnd 120 127 *x]]
[TestEq "rnd min max : *" 120 *x [rnd 120 127 : *x]]

[TestEq "rnd *" 11990345 *x [rnd *x]]
[TestEq "rnd *" 3400090 *x [rnd *x]]
[TestWorks "rnd_control out" [rnd_control 11990345]]
[TestEq "rnd *" 3400090 *x [rnd *x]]
[TestWorks "rnd_control a c" [rnd_control 1 2]]
[TestEq "rnd *" 3400092 *x [rnd *x]]
[TestEq "rnd *" 3400094 *x [rnd *x]]
[TestEq "rnd *" 3400096 *x [rnd *x]]
[TestEq "rnd *" 3400098 *x [rnd *x]]
[TestWorks "rnd_control out a c" [rnd_control 3400090 1 1]]
[TestEq "rnd *" 3400091 *x [rnd *x]]
[TestEq "rnd *" 3400092 *x [rnd *x]]
[TestEq "rnd *" 3400093 *x [rnd *x]]
[TestWorks "rnd_control out bits a c" [rnd_control 3400090 3 1 1]]
[TestEq "rnd *" 3 *x [rnd *x]]
[TestEq "rnd *" 4 *x [rnd *x]]
[TestEq "rnd *" 5 *x [rnd *x]]
[TestEq "rnd *" 6 *x [rnd *x]]
[TestEq "rnd *" 7 *x [rnd *x]]
[TestEq "rnd *" 0 *x [rnd *x]]
[TestEq "rnd *" 1 *x [rnd *x]]

[TestEq "series integer *" [129 133 131 127] *x [series 127 4 2 *x]]
[TestEq "series double : *" [127.75 127.5 127.0 127.25] *x [series 127 4 0.25 : *x]]
[TestEq "series atoms *" [mariner voyager viking sonda] *x [series [sonda mariner viking voyager] *x]]
[TestEq "series atoms : *" [voyager viking sonda mariner] *x [series [sonda mariner viking voyager] : *x]]
[create_atom "soyuz"]
[TestEq "series variable" [mariner soyuz voyager viking sonda] *x [eq *y [*a *b *c *d *e]] [series *y *x] [eq *y [sonda mariner viking voyager soyuz]]]

[TestEq "multithreaded accumulator" [3 2 1] *y
	[ACCUMULATOR *x]
	[crack [wait 10] [*x 2]]
	[*x 1] [wait 20] [*x 3] [wait 10]
	[*x : *y]
]

[TestEq "multithreaded accumulator with mutex wait" [2 3 1] *y
	[ACCUMULATOR *x]
	[mutex *m]
	[crack [wait 10] [*m wait] [*x 2] [*m signal]]
	[*m wait] [*x 1] [wait 20] [*x 3] [*m signal] [wait 10]
	[*x : *y]
]

[TestEq "multithreaded accumulator with mutex enter" [3 1] *y
	[ACCUMULATOR *x]
	[mutex *m]
	[crack [wait 10] [*m enter] [*x 2] [*m signal]]
	[*m enter] [*x 1] [wait 20] [*x 3] [*m signal] [wait 10]
	[*x : *y]
]

[TestEq "multithreaded accumulator with semaphore wait" [2 3 1] *y
	[ACCUMULATOR *x]
	[semaphore *m]
	[crack [wait 10] [*m wait] [*x 2] [*m signal]]
	[*m wait] [*x 1] [wait 20] [*x 3] [*m signal] [wait 10]
	[*x : *y]
]

[TestEq "multithreaded accumulator with semaphore 2 wait" [3 2 1] *y
	[ACCUMULATOR *x]
	[semaphore *m 2]
	[crack [wait 10] [*m wait] [*x 2] [*m signal]]
	[*m wait] [*x 1] [wait 20] [*x 3] [*m signal] [wait 10]
	[*x : *y]
]

[TestEq "multithreaded accumulator with semaphore 2 waited" [2 3 1] *y
	[ACCUMULATOR *x]
	[semaphore *m 2] [*m wait]
	[crack [wait 10] [*m wait] [*x 2] [*m signal]]
	[*m wait] [*x 1] [wait 20] [*x 3] [*m signal] [wait 10]
	[*x : *y]
]

[TestEq "multithreaded accumulator with semaphore enter" [3 1] *y
	[ACCUMULATOR *x]
	[semaphore *m]
	[crack [wait 10] [*m enter] [*x 2] [*m signal]]
	[*m enter] [*x 1] [wait 20] [*x 3] [*m signal] [wait 10]
	[*x : *y]
]

[TestEq "multithreaded accumulator with msemaphore wait" [2 3 1] *y
	[ACCUMULATOR *x]
	[msemaphore *m]
	[crack [wait 10] [*m wait] [*x 2] [*m signal]]
	[*m wait] [*x 1] [wait 20] [*x 3] [*m signal] [wait 10]
	[*x : *y]
]

[TestEq "multithreaded accumulator with msemaphore 2 wait" [3 2 1] *y
	[ACCUMULATOR *x]
	[msemaphore *m 2]
	[crack [wait 10] [*m wait] [*x 2] [*m signal]]
	[*m wait] [*x 1] [wait 20] [*x 3] [*m signal] [wait 10]
	[*x : *y]
]

[TestEq "multithreaded accumulator with msemaphore 2 waited" [2 3 1] *y
	[ACCUMULATOR *x]
	[msemaphore *m 2] [*m wait]
	[crack [wait 10] [*m wait] [*x 2] [*m signal]]
	[*m wait] [*x 1] [wait 20] [*x 3] [*m signal] [wait 10]
	[*x : *y]
]

[TestEq "multithreaded accumulator with msemaphore enter" [3 1] *y
	[ACCUMULATOR *x]
	[msemaphore *m]
	[crack [wait 10] [*m enter] [*x 2] [*m signal]]
	[*m enter] [*x 1] [wait 20] [*x 3] [*m signal] [wait 10]
	[*x : *y]
]

[TestEq "eq 127 *" 127 *x [eq 127 *x]]
[TestWorks "not eq 127 128" [not eq 127 128]]
[TestFails "not eq 127 127" [not eq 127 127]]
[TestWorks "not not eq 127 127" [not not eq 127 127]]
[TestFails "not not eq 127 128" [not not eq 127 128]]

[import "capitol"]

[TestEq "ALL capitol" [["England" "London"] ["USA" "Cupertino"] ["Poland" "Warsaw"] ["France" "Paris"] ["New Zealand" "Wellington"] ["Australia" "Canberra"]] *x
	[ACCUMULATOR *accu]
	[SELECT
		[[ALL [capitol : *c] [*accu *c]] fail]
		[[*accu ["England" "London"]]]
	]
	[*accu : *x]
]
[TestEq "ONE capitol" [["England" "London"] ["Australia" "Canberra"]] *x
	[ACCUMULATOR *accu]
	[SELECT
		[[ONE [capitol : *c] [*accu *c]] fail]
		[[*accu ["England" "London"]]]
	]
	[*accu : *x]
]

[TestWorks "TRY eq 127 127" [TRY [eq 127 127]]]
[TestWorks "TRY eq 127 128" [TRY [eq 127 128]]]
[TestWorks "PROBE"
	[var [*v var]]
	[*v : *v1] [is_atom *v1]
	[PROBE [eq *x 127] [*v *x]]
	[is_var *x]
	[*v : *v2] [is_integer *v2]
]

[TestEq "APPEND [1 2 3] 127" [1 2 3 : 127] *x [APPEND [1 2 3] 127 *x]]
[TestEq "APPEND * [4 5] [1 2 3 4 5]" [1 2 3] *x [APPEND *x [4 5] [1 2 3 4 5]]]
[TestEq "APPEND [1 2 3] [4 5]" [1 2 3 4 5] *x [APPEND [1 2 3] [4 5] *x]]
[TestEq "APPEMD [1 2 3] * [1 2 3 4 5]" [4 5] *x [APPEND [1 2 3] *x [1 2 3 4 5]]]
[TestWorks "APPEND [1 2 3] [4 5] [1 2 3 4 5]" [APPEND [1 2 3] [4 5] [1 2 3 4 5]]]
[TestFails "APPEND [1 2] [3 4] [1 2 3 4 5]" [APPEND [1 2] [3 4] [1 2 3 4 5]]]

[TestEq "REVERSE [1 2 3 4]" [4 3 2 1] *x [REVERSE [1 2 3 4] *x]]
[TestEq "REVERSE * [1 2 3 4]" [4 3 2 1] *x [REVERSE *x [1 2 3 4]]]
[TestWorks "REVERSE [1 2 3] [3 2 1]" [REVERSE [1 2 3] [3 2 1]]]
[TestFails "REVERSE [1 2 3] [3 2 1 1]" [REVERSE [1 2 3] [3 2 1 1]]]
[TestEq "REVERSE [1 2 3] 127 *" [3 2 1 : 127] *x [REVERSE [1 2 3] 127 *x]]
[TestEq "REVERSE * 127 [1 2 3 : 127]" [3 2 1] *x [REVERSE *x 127 [1 2 3 : 127]]]

[TestEq "LENGTH [1 2 3]" 3 *x [LENGTH [1 2 3] *x]]
[TestEq "LENGTH *x 3" [1 2 3] *x [LENGTH *x 3]]
[TestWorks "LENGTH [1 2 3] 3" [LENGTH [1 2 3] 3]]
[TestFails "LENGTH [1 2 3] 4" [LENGTH [1 2 3] 4]]
[TestFails "LENGTH 127" [LENGTH 127 *x]]

[TestEq "AT 3 *x [1 2 3 4 5 6]" 4 *x [AT 3 *x [1 2 3 4 5 6]]]
[TestEq "AT 0 *x [1 2 3 4 5 6]" 1 *x [AT 0 *x [1 2 3 4 5 6]]]
[TestFails "AT AT *x [1 2 3 4 5 6]" [AT AT *x [1 2 3 4 5 6]]]

[TestWorks "ONLIST 2 [1 2 3]" [ONLIST 2 [1 2 3]]]
[TestFails "ONLIST 127 [1 2 3]" [ONLIST 127 [1 2 3]]]
[TestEq "ONLIST 127 [1 * 3]" 127 *x [ONLIST 127 [1 *x 3]]]
[TestEq "isall ONLIST 127 [* * *]" [[[] [] 127] [[] 127 []] [127 [] []]] *x [isall *x [*a *b *c] [ONLIST 127 [*a *b *c]]]]
[TestEq "isall ONLIST * [1 2 3]" [3 2 1] *x [isall *x *y [ONLIST *y [1 2 3]]]]

[TestWorks "INLIST [1 2 3] 127 [1 2 127 3]" [INLIST [1 2 3] 127 [1 2 127 3]]]
[TestFails "INLIST [1 2 3] 127 [1 2 127 3 4]" [INLIST [1 2 3] 127 [1 2 127 3 4]]]
[TestFails "INLIST [1 2 3] 127 [1 2 3]" [INLIST [1 2 3] 127 [1 2 3]]]
[TestEq "isall INLIST [1 2 3] 127 *" [[1 2 3 127] [1 2 127 3] [1 127 2 3] [127 1 2 3]] *x [isall *x *y [INLIST [1 2 3] 127 *y]]]
[TestEq "INLIST * 127 [1 2 127 3]" [1 2 3] *x [INLIST *x 127 [1 2 127 3]]]
[TestFails "INLIST * 127 [1 2 3]" [INLIST * 127 [1 2 3]]]
[TestEq "isall INLIST * 127 [1 127 2 127 3]" [[1 127 2 3] [1 2 127 3]] *x [isall *x *y [INLIST *y 127 [1 127 2 127 3]]]]
[TestEq "isallr INLIST [1 2 3] 127" [[127 1 2 3] [1 127 2 3] [1 2 127 3] [1 2 3 127]] *x [isallr *x *y [INLIST [1 2 3] 127 *y]]]

[TestEq "isall NODUP [1 127 2 127 3] *" [[1 2 127 3]] *x [isall *x *y [NODUP [1 127 2 127 3] *y]]]
[TestEq "NODUP [1 127 2 127 3]" [1 2 127 3] *x [NODUP [1 127 2 127 3] *x]]
[TestEq "NODUP [1 2 3]" [1 2 3] *x [NODUP [1 2 3] *x]]

[TestEq "MAP [[1 11] [2 22] [3 33]] * *" [[1 2 3] [11 22 33]] *x [MAP [[1 11] [2 22] [3 33]] : *x]]
[TestEq "MAP * [1 2 3] [4 5 6]" [[1 4] [2 5] [3 6]] *x [MAP *x [1 2 3] [4 5 6]]]

[TestEq "WHILE 1 2 3" [3 2 1] *xv [ACCUMULATOR *x] [var [*y 1]] [WHILE [res [*y : *f] [<= *f 3]] [*x *f] [inc *y]] [*x : *xv]]
[TestEq "FOR 1 .. 3" [3 2 1] *xv [ACCUMULATOR *x] [FOR *sub 1 3 1 [*x *sub]] [*x : *xv]]
[TestEq "FOR [1 2 3]" [3 2 1] *xv [ACCUMULATOR *x] [FOR *e [1 2 3] [*x *e]] [*x : *xv]]
[TestEq "forever 1 2 3" [3 2 1] *xv [ACCUMULATOR *x] [var [*v 1]] [TRY [forever [not not res [*v : *vv] [<= *vv 3] [*x *vv] [inc *v]]]] [*x : *xv]]
[TestEq "IF true" 128 *xv [var [*v 127]] [IF [eq 1 1] [inc *v]] [*v : *xv]]
[TestEq "IF false" 127 *xv [var [*v 127]] [IF [eq 1 2] [inc *v]] [*v : *xv]]
[TestEq "IF true else" 128 *xv [var [*v 127]] [IF [eq 1 1] [inc *v] [dec *v]] [*v : *xv]]
[TestEq "IF true else" 126 *xv [var [*v 127]] [IF [eq 1 2] [inc *v] [dec *v]] [*v : *xv]]

[TestEq "minimise" [5 4 3 2 1] *x [ACCUMULATOR *v] [ALL [minimise *m 1 5] [*v *m]] [*v : *x]]
[TestEq "minimise" [3.0 2.5 2.0 1.5 1] *x [ACCUMULATOR *v] [ALL [minimise *m 1 3 0.5] [*v *m]] [*v : *x]]
[TestEq "maximise" [1 2 3 4 5] *x [ACCUMULATOR *v] [ALL [maximise *m 1 5] [*v *m]] [*v : *x]]
[TestEq "maximise" [1.0 1.5 2.0 2.5 3] *x [ACCUMULATOR *v] [ALL [maximise *m 1 3 0.5] [*v *m]] [*v : *x]]

[TestFails "res  [sum *x *y 3] [eq *x 1]"      [res  [sum *x *y 3] [eq *x 1]]]
[TestEq    "lazy [sum *x *y 3] [eq *x 1]" 2 *y [lazy [sum *x *y 3] [eq *x 1]]]

[TestEq "<=> 4 3 6 1 7 5 9 8 2" [1 2 3 4 5 6 7 8 9] *x [<=> [4 3 6 1 7 5 9 8 2] *x]]
[TestEq "<=> > 4 3 6 1 7 5 9 8 2" [9 8 7 6 5 4 3 2 1] *x [<=> > [4 3 6 1 7 5 9 8 2] *x []]]
[TestEq "sort greater 4 3 6 1 7 5 9 8 2" [9 8 7 6 5 4 3 2 1] *x [sort greater [4 3 6 1 7 5 9 8 2] *x []]]
[TestEq "sort 4 3 6 1 7 5 9 8 2" [1 2 3 4 5 6 7 8 9] *x [sort [4 3 6 1 7 5 9 8 2] *x]]

[TestEq "isall cl index capitol" [[4 ["USA" "Cupertino"]] [3 ["Poland" "Warsaw"]] [2 ["France" "Paris"]] [1 ["New Zealand" "Wellington"]] [0 ["Australia" "Canberra"]]] *x
	[isall *x [*index *parameters] [cl *index [[capitol : *parameters]]]]
]
[TestEq "isall cl capitol" [["USA" "Cupertino"] ["Poland" "Warsaw"] ["France" "Paris"] ["New Zealand" "Wellington"] ["Australia" "Canberra"]] *x [isall *x *p [cl [[capitol : *p]]]]]

[TestEq "delcl capitol New Zealand" [[[capitol "Australia" "Canberra"]] [[capitol "France" "Paris"]] [[capitol "Poland" "Warsaw"]] [[capitol "USA" "Cupertino"]]] *x
	[delcl [[capitol "New Zealand" *]]] [list capitol : *x]
]
[TestEq "delallcl capitol" [] *x [delallcl capitol] [list capitol : *x]]

[TestEq "monitor" [1 2 3 4] *x
	[ACCUMULATOR *accu]
	[monitor *monitor]
	[crack [*monitor wait [*accu 4] [wait 50] [*accu 3]]]
	[wait 10] [*monitor wait [*accu 2] [wait 50] [*accu 1]]
	[*accu : *x]
]

[TestEq "monitor as res" [1 3 2 4] *x
	[ACCUMULATOR *accu]
	[crack [res [*accu 4] [wait 50] [*accu 3]]]
	[wait 10] [res [*accu 2] [wait 50] [*accu 1]]
	[*accu : *x]
]

[TestEq "critical section" [1 2 3 4] *x
	[ACCUMULATOR *accu]
	[critical_section [*critical *x] [*accu *x] [wait 50] [sub *x 1 *x1] [*accu *x1]]
	[crack [*critical 4]]
	[wait 10] [*critical 2]
	[*accu : *x]
]

[task voyager [list exit]
	[FOREVER [SELECT
		[[voyager select exit []] [voyager] [timeout]]
		[[voyager select list [*count] [CL voyager *count]]]
		[[voyager wait]]
	]]
]

[TestEq "active task cl count" 9 *x [voyager enter list *x]]

[voyager enter exit] [wait 10]

[TestEq "inactive task cl count" 0 *x [CL voyager : *x]]

[auto_atoms]

[exit]
